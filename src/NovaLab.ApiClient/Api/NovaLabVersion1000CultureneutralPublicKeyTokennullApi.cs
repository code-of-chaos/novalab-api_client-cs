/*
 * NovaLab API
 *
 * An ASP.NET Core Web API for managing your streams
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using NovaLab.ApiClient.Client;
using System;
using System.Threading;
using System.Threading.Tasks;

namespace NovaLab.ApiClient.Api;

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface INovaLabVersion1000CultureneutralPublicKeyTokennullApiSync : IApiAccessor {
    #region Synchronous Operations
    /// <summary>
    /// </summary>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="returnUrl"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void AccountLogoutPost(string returnUrl, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="returnUrl"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> AccountLogoutPostWithHttpInfo(string returnUrl, int operationIndex = 0);
    /// <summary>
    /// </summary>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void AccountManageDownloadPersonalDataPost(int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> AccountManageDownloadPersonalDataPostWithHttpInfo(int operationIndex = 0);
    /// <summary>
    /// </summary>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="provider"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void AccountManageLinkExternalLoginPost(string provider, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="provider"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> AccountManageLinkExternalLoginPostWithHttpInfo(string provider, int operationIndex = 0);
    /// <summary>
    /// </summary>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="provider"></param>
    /// <param name="returnUrl"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void AccountPerformExternalLoginPost(string provider, string returnUrl, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="provider"></param>
    /// <param name="returnUrl"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> AccountPerformExternalLoginPostWithHttpInfo(string provider, string returnUrl, int operationIndex = 0);
    #endregion Synchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface INovaLabVersion1000CultureneutralPublicKeyTokennullApiAsync : IApiAccessor {
    #region Asynchronous Operations
    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="returnUrl"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task AccountLogoutPostAsync(string returnUrl, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="returnUrl"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> AccountLogoutPostWithHttpInfoAsync(string returnUrl, int operationIndex = 0, CancellationToken cancellationToken = default);
    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task AccountManageDownloadPersonalDataPostAsync(int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> AccountManageDownloadPersonalDataPostWithHttpInfoAsync(int operationIndex = 0, CancellationToken cancellationToken = default);
    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="provider"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task AccountManageLinkExternalLoginPostAsync(string provider, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="provider"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> AccountManageLinkExternalLoginPostWithHttpInfoAsync(string provider, int operationIndex = 0, CancellationToken cancellationToken = default);
    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="provider"></param>
    /// <param name="returnUrl"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task AccountPerformExternalLoginPostAsync(string provider, string returnUrl, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="provider"></param>
    /// <param name="returnUrl"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> AccountPerformExternalLoginPostWithHttpInfoAsync(string provider, string returnUrl, int operationIndex = 0, CancellationToken cancellationToken = default);
    #endregion Asynchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface INovaLabVersion1000CultureneutralPublicKeyTokennullApi : INovaLabVersion1000CultureneutralPublicKeyTokennullApiSync, INovaLabVersion1000CultureneutralPublicKeyTokennullApiAsync {
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public class NovaLabVersion1000CultureneutralPublicKeyTokennullApi : INovaLabVersion1000CultureneutralPublicKeyTokennullApi {
    private ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    ///     Initializes a new instance of the <see cref="NovaLabVersion1000CultureneutralPublicKeyTokennullApi" /> class.
    /// </summary>
    /// <returns></returns>
    public NovaLabVersion1000CultureneutralPublicKeyTokennullApi() : this((string)null) {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="NovaLabVersion1000CultureneutralPublicKeyTokennullApi" /> class.
    /// </summary>
    /// <returns></returns>
    public NovaLabVersion1000CultureneutralPublicKeyTokennullApi(string basePath) {
        Configuration = ApiClient.Client.Configuration.MergeConfigurations(
        GlobalConfiguration.Instance,
        new Configuration { BasePath = basePath }
        );
        Client = new Client.ApiClient(Configuration.BasePath);
        AsynchronousClient = new Client.ApiClient(Configuration.BasePath);
        ExceptionFactory = ApiClient.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="NovaLabVersion1000CultureneutralPublicKeyTokennullApi" /> class
    ///     using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public NovaLabVersion1000CultureneutralPublicKeyTokennullApi(Configuration configuration) {
        if (configuration == null) throw new ArgumentNullException("configuration");

        Configuration = ApiClient.Client.Configuration.MergeConfigurations(
        GlobalConfiguration.Instance,
        configuration
        );
        Client = new Client.ApiClient(Configuration.BasePath);
        AsynchronousClient = new Client.ApiClient(Configuration.BasePath);
        ExceptionFactory = ApiClient.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="NovaLabVersion1000CultureneutralPublicKeyTokennullApi" /> class
    ///     using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public NovaLabVersion1000CultureneutralPublicKeyTokennullApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration) {
        if (client == null) throw new ArgumentNullException("client");
        if (asyncClient == null) throw new ArgumentNullException("asyncClient");
        if (configuration == null) throw new ArgumentNullException("configuration");

        Client = client;
        AsynchronousClient = asyncClient;
        Configuration = configuration;
        ExceptionFactory = ApiClient.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    ///     The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    ///     Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath() => Configuration.BasePath;

    /// <summary>
    ///     Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    ///     Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory {
        get {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1) {
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            }
            return _exceptionFactory;
        }
        set => _exceptionFactory = value;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="returnUrl"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void AccountLogoutPost(string returnUrl, int operationIndex = 0) {
        AccountLogoutPostWithHttpInfo(returnUrl);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="returnUrl"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> AccountLogoutPostWithHttpInfo(string returnUrl, int operationIndex = 0) {
        // verify the required parameter 'returnUrl' is set
        if (returnUrl == null) {
            throw new ApiException(400, "Missing required parameter 'returnUrl' when calling NovaLabVersion1000CultureneutralPublicKeyTokennullApi->AccountLogoutPost");
        }

        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes = {
            "multipart/form-data",
            "application/x-www-form-urlencoded"
        };

        // to determine the Accept header
        string[] _accepts = {
        };

        string? localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        string? localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.FormParameters.Add("returnUrl", ClientUtils.ParameterToString(returnUrl));// form parameter

        localVarRequestOptions.Operation = "NovaLabVersion1000CultureneutralPublicKeyTokennullApi.AccountLogoutPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        ApiResponse<object>? localVarResponse = Client.Post<object>("/Account/Logout", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null) {
            Exception _exception = ExceptionFactory("AccountLogoutPost", localVarResponse);
            if (_exception != null) {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="returnUrl"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task AccountLogoutPostAsync(string returnUrl, int operationIndex = 0, CancellationToken cancellationToken = default) {
        await AccountLogoutPostWithHttpInfoAsync(returnUrl, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="returnUrl"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> AccountLogoutPostWithHttpInfoAsync(string returnUrl, int operationIndex = 0, CancellationToken cancellationToken = default) {
        // verify the required parameter 'returnUrl' is set
        if (returnUrl == null) {
            throw new ApiException(400, "Missing required parameter 'returnUrl' when calling NovaLabVersion1000CultureneutralPublicKeyTokennullApi->AccountLogoutPost");
        }


        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes = {
            "multipart/form-data",
            "application/x-www-form-urlencoded"
        };

        // to determine the Accept header
        string[] _accepts = {
        };

        string? localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        string? localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.FormParameters.Add("returnUrl", ClientUtils.ParameterToString(returnUrl));// form parameter

        localVarRequestOptions.Operation = "NovaLabVersion1000CultureneutralPublicKeyTokennullApi.AccountLogoutPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        ApiResponse<object>? localVarResponse = await AsynchronousClient.PostAsync<object>("/Account/Logout", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null) {
            Exception _exception = ExceptionFactory("AccountLogoutPost", localVarResponse);
            if (_exception != null) {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void AccountManageDownloadPersonalDataPost(int operationIndex = 0) {
        AccountManageDownloadPersonalDataPostWithHttpInfo();
    }

    /// <summary>
    /// </summary>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> AccountManageDownloadPersonalDataPostWithHttpInfo(int operationIndex = 0) {
        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes = {
        };

        // to determine the Accept header
        string[] _accepts = {
        };

        string? localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        string? localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }


        localVarRequestOptions.Operation = "NovaLabVersion1000CultureneutralPublicKeyTokennullApi.AccountManageDownloadPersonalDataPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        ApiResponse<object>? localVarResponse = Client.Post<object>("/Account/Manage/DownloadPersonalData", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null) {
            Exception _exception = ExceptionFactory("AccountManageDownloadPersonalDataPost", localVarResponse);
            if (_exception != null) {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task AccountManageDownloadPersonalDataPostAsync(int operationIndex = 0, CancellationToken cancellationToken = default) {
        await AccountManageDownloadPersonalDataPostWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> AccountManageDownloadPersonalDataPostWithHttpInfoAsync(int operationIndex = 0, CancellationToken cancellationToken = default) {

        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes = {
        };

        // to determine the Accept header
        string[] _accepts = {
        };

        string? localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        string? localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }


        localVarRequestOptions.Operation = "NovaLabVersion1000CultureneutralPublicKeyTokennullApi.AccountManageDownloadPersonalDataPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        ApiResponse<object>? localVarResponse = await AsynchronousClient.PostAsync<object>("/Account/Manage/DownloadPersonalData", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null) {
            Exception _exception = ExceptionFactory("AccountManageDownloadPersonalDataPost", localVarResponse);
            if (_exception != null) {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="provider"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void AccountManageLinkExternalLoginPost(string provider, int operationIndex = 0) {
        AccountManageLinkExternalLoginPostWithHttpInfo(provider);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="provider"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> AccountManageLinkExternalLoginPostWithHttpInfo(string provider, int operationIndex = 0) {
        // verify the required parameter 'provider' is set
        if (provider == null) {
            throw new ApiException(400, "Missing required parameter 'provider' when calling NovaLabVersion1000CultureneutralPublicKeyTokennullApi->AccountManageLinkExternalLoginPost");
        }

        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes = {
            "multipart/form-data",
            "application/x-www-form-urlencoded"
        };

        // to determine the Accept header
        string[] _accepts = {
        };

        string? localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        string? localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.FormParameters.Add("provider", ClientUtils.ParameterToString(provider));// form parameter

        localVarRequestOptions.Operation = "NovaLabVersion1000CultureneutralPublicKeyTokennullApi.AccountManageLinkExternalLoginPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        ApiResponse<object>? localVarResponse = Client.Post<object>("/Account/Manage/LinkExternalLogin", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null) {
            Exception _exception = ExceptionFactory("AccountManageLinkExternalLoginPost", localVarResponse);
            if (_exception != null) {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="provider"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task AccountManageLinkExternalLoginPostAsync(string provider, int operationIndex = 0, CancellationToken cancellationToken = default) {
        await AccountManageLinkExternalLoginPostWithHttpInfoAsync(provider, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="provider"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> AccountManageLinkExternalLoginPostWithHttpInfoAsync(string provider, int operationIndex = 0, CancellationToken cancellationToken = default) {
        // verify the required parameter 'provider' is set
        if (provider == null) {
            throw new ApiException(400, "Missing required parameter 'provider' when calling NovaLabVersion1000CultureneutralPublicKeyTokennullApi->AccountManageLinkExternalLoginPost");
        }


        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes = {
            "multipart/form-data",
            "application/x-www-form-urlencoded"
        };

        // to determine the Accept header
        string[] _accepts = {
        };

        string? localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        string? localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.FormParameters.Add("provider", ClientUtils.ParameterToString(provider));// form parameter

        localVarRequestOptions.Operation = "NovaLabVersion1000CultureneutralPublicKeyTokennullApi.AccountManageLinkExternalLoginPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        ApiResponse<object>? localVarResponse = await AsynchronousClient.PostAsync<object>("/Account/Manage/LinkExternalLogin", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null) {
            Exception _exception = ExceptionFactory("AccountManageLinkExternalLoginPost", localVarResponse);
            if (_exception != null) {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="provider"></param>
    /// <param name="returnUrl"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void AccountPerformExternalLoginPost(string provider, string returnUrl, int operationIndex = 0) {
        AccountPerformExternalLoginPostWithHttpInfo(provider, returnUrl);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="provider"></param>
    /// <param name="returnUrl"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> AccountPerformExternalLoginPostWithHttpInfo(string provider, string returnUrl, int operationIndex = 0) {
        // verify the required parameter 'provider' is set
        if (provider == null) {
            throw new ApiException(400, "Missing required parameter 'provider' when calling NovaLabVersion1000CultureneutralPublicKeyTokennullApi->AccountPerformExternalLoginPost");
        }

        // verify the required parameter 'returnUrl' is set
        if (returnUrl == null) {
            throw new ApiException(400, "Missing required parameter 'returnUrl' when calling NovaLabVersion1000CultureneutralPublicKeyTokennullApi->AccountPerformExternalLoginPost");
        }

        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes = {
            "multipart/form-data",
            "application/x-www-form-urlencoded"
        };

        // to determine the Accept header
        string[] _accepts = {
        };

        string? localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        string? localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.FormParameters.Add("provider", ClientUtils.ParameterToString(provider));// form parameter
        localVarRequestOptions.FormParameters.Add("returnUrl", ClientUtils.ParameterToString(returnUrl));// form parameter

        localVarRequestOptions.Operation = "NovaLabVersion1000CultureneutralPublicKeyTokennullApi.AccountPerformExternalLoginPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        ApiResponse<object>? localVarResponse = Client.Post<object>("/Account/PerformExternalLogin", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null) {
            Exception _exception = ExceptionFactory("AccountPerformExternalLoginPost", localVarResponse);
            if (_exception != null) {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="provider"></param>
    /// <param name="returnUrl"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task AccountPerformExternalLoginPostAsync(string provider, string returnUrl, int operationIndex = 0, CancellationToken cancellationToken = default) {
        await AccountPerformExternalLoginPostWithHttpInfoAsync(provider, returnUrl, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="provider"></param>
    /// <param name="returnUrl"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> AccountPerformExternalLoginPostWithHttpInfoAsync(string provider, string returnUrl, int operationIndex = 0, CancellationToken cancellationToken = default) {
        // verify the required parameter 'provider' is set
        if (provider == null) {
            throw new ApiException(400, "Missing required parameter 'provider' when calling NovaLabVersion1000CultureneutralPublicKeyTokennullApi->AccountPerformExternalLoginPost");
        }

        // verify the required parameter 'returnUrl' is set
        if (returnUrl == null) {
            throw new ApiException(400, "Missing required parameter 'returnUrl' when calling NovaLabVersion1000CultureneutralPublicKeyTokennullApi->AccountPerformExternalLoginPost");
        }


        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes = {
            "multipart/form-data",
            "application/x-www-form-urlencoded"
        };

        // to determine the Accept header
        string[] _accepts = {
        };

        string? localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        string? localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.FormParameters.Add("provider", ClientUtils.ParameterToString(provider));// form parameter
        localVarRequestOptions.FormParameters.Add("returnUrl", ClientUtils.ParameterToString(returnUrl));// form parameter

        localVarRequestOptions.Operation = "NovaLabVersion1000CultureneutralPublicKeyTokennullApi.AccountPerformExternalLoginPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        ApiResponse<object>? localVarResponse = await AsynchronousClient.PostAsync<object>("/Account/PerformExternalLogin", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null) {
            Exception _exception = ExceptionFactory("AccountPerformExternalLoginPost", localVarResponse);
            if (_exception != null) {
                throw _exception;
            }
        }

        return localVarResponse;
    }
}
