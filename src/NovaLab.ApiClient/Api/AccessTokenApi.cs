/*
 * NovaLab API
 *
 * An ASP.NET Core Web API for managing your streams
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using NovaLab.ApiClient.Client;
using NovaLab.ApiClient.Model;
using System;
using System.Threading;
using System.Threading.Tasks;

namespace NovaLab.ApiClient.Api;

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IAccessTokenApiSync : IApiAccessor {
    #region Synchronous Operations
    /// <summary>
    /// </summary>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="userId"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResult</returns>
    ApiResult RefreshTokens(string? userId = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="userId"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of ApiResult</returns>
    ApiResponse<ApiResult> RefreshTokensWithHttpInfo(string? userId = default, int operationIndex = 0);
    #endregion Synchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IAccessTokenApiAsync : IApiAccessor {
    #region Asynchronous Operations
    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="userId"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResult</returns>
    Task<ApiResult> RefreshTokensAsync(string? userId = default, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="userId"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ApiResult)</returns>
    Task<ApiResponse<ApiResult>> RefreshTokensWithHttpInfoAsync(string? userId = default, int operationIndex = 0, CancellationToken cancellationToken = default);
    #endregion Asynchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IAccessTokenApi : IAccessTokenApiSync, IAccessTokenApiAsync {
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public class AccessTokenApi : IAccessTokenApi {
    private ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    ///     Initializes a new instance of the <see cref="AccessTokenApi" /> class.
    /// </summary>
    /// <returns></returns>
    public AccessTokenApi() : this((string)null) {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="AccessTokenApi" /> class.
    /// </summary>
    /// <returns></returns>
    public AccessTokenApi(string basePath) {
        Configuration = ApiClient.Client.Configuration.MergeConfigurations(
        GlobalConfiguration.Instance,
        new Configuration { BasePath = basePath }
        );
        Client = new Client.ApiClient(Configuration.BasePath);
        AsynchronousClient = new Client.ApiClient(Configuration.BasePath);
        ExceptionFactory = ApiClient.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="AccessTokenApi" /> class
    ///     using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public AccessTokenApi(Configuration configuration) {
        if (configuration == null) throw new ArgumentNullException("configuration");

        Configuration = ApiClient.Client.Configuration.MergeConfigurations(
        GlobalConfiguration.Instance,
        configuration
        );
        Client = new Client.ApiClient(Configuration.BasePath);
        AsynchronousClient = new Client.ApiClient(Configuration.BasePath);
        ExceptionFactory = ApiClient.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="AccessTokenApi" /> class
    ///     using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public AccessTokenApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration) {
        if (client == null) throw new ArgumentNullException("client");
        if (asyncClient == null) throw new ArgumentNullException("asyncClient");
        if (configuration == null) throw new ArgumentNullException("configuration");

        Client = client;
        AsynchronousClient = asyncClient;
        Configuration = configuration;
        ExceptionFactory = ApiClient.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    ///     The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    ///     Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath() => Configuration.BasePath;

    /// <summary>
    ///     Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    ///     Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory {
        get {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1) {
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            }
            return _exceptionFactory;
        }
        set => _exceptionFactory = value;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="userId"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResult</returns>
    public ApiResult RefreshTokens(string? userId = default, int operationIndex = 0) {
        ApiResponse<ApiResult> localVarResponse = RefreshTokensWithHttpInfo(userId);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="userId"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of ApiResult</returns>
    public ApiResponse<ApiResult> RefreshTokensWithHttpInfo(string? userId = default, int operationIndex = 0) {
        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes = {
        };

        // to determine the Accept header
        string[] _accepts = {
            "text/plain",
            "application/json",
            "text/json"
        };

        string? localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        string? localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        if (userId != null) {
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "userId", userId));
        }

        localVarRequestOptions.Operation = "AccessTokenApi.RefreshTokens";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        ApiResponse<ApiResult>? localVarResponse = Client.Get<ApiResult>("/api/twitch/tokens/refresh", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null) {
            Exception _exception = ExceptionFactory("RefreshTokens", localVarResponse);
            if (_exception != null) {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="userId"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResult</returns>
    public async Task<ApiResult> RefreshTokensAsync(string? userId = default, int operationIndex = 0, CancellationToken cancellationToken = default) {
        ApiResponse<ApiResult> localVarResponse = await RefreshTokensWithHttpInfoAsync(userId, operationIndex, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="userId"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ApiResult)</returns>
    public async Task<ApiResponse<ApiResult>> RefreshTokensWithHttpInfoAsync(string? userId = default, int operationIndex = 0, CancellationToken cancellationToken = default) {

        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes = {
        };

        // to determine the Accept header
        string[] _accepts = {
            "text/plain",
            "application/json",
            "text/json"
        };

        string? localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        string? localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        if (userId != null) {
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "userId", userId));
        }

        localVarRequestOptions.Operation = "AccessTokenApi.RefreshTokens";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        ApiResponse<ApiResult>? localVarResponse = await AsynchronousClient.GetAsync<ApiResult>("/api/twitch/tokens/refresh", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null) {
            Exception _exception = ExceptionFactory("RefreshTokens", localVarResponse);
            if (_exception != null) {
                throw _exception;
            }
        }

        return localVarResponse;
    }
}
