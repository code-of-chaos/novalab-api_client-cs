/*
 * NovaLab API
 *
 * An ASP.NET Core Web API for managing your streams
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace NovaLab.ApiClient.Model;

/// <summary>
///     NewFollowerDto
/// </summary>
[DataContract(Name = "NewFollowerDto")]
public class NewFollowerDto : IEquatable<NewFollowerDto>, IValidatableObject {
    /// <summary>
    ///     Initializes a new instance of the <see cref="NewFollowerDto" /> class.
    /// </summary>
    /// <param name="newFollowerId">newFollowerId.</param>
    /// <param name="followerGoalId">followerGoalId.</param>
    /// <param name="timeStamp">timeStamp.</param>
    /// <param name="followerTwitchUserId">followerTwitchUserId.</param>
    public NewFollowerDto(Guid newFollowerId = default, Guid followerGoalId = default, DateTime timeStamp = default, string followerTwitchUserId = default) {
        NewFollowerId = newFollowerId;
        FollowerGoalId = followerGoalId;
        TimeStamp = timeStamp;
        FollowerTwitchUserId = followerTwitchUserId;
    }

    /// <summary>
    ///     Gets or Sets NewFollowerId
    /// </summary>
    [DataMember(Name = "newFollowerId", EmitDefaultValue = false)]
    public Guid NewFollowerId { get; set; }

    /// <summary>
    ///     Gets or Sets FollowerGoalId
    /// </summary>
    [DataMember(Name = "followerGoalId", EmitDefaultValue = false)]
    public Guid FollowerGoalId { get; set; }

    /// <summary>
    ///     Gets or Sets TimeStamp
    /// </summary>
    [DataMember(Name = "timeStamp", EmitDefaultValue = false)]
    public DateTime TimeStamp { get; set; }

    /// <summary>
    ///     Gets or Sets FollowerTwitchUserId
    /// </summary>
    [DataMember(Name = "followerTwitchUserId", EmitDefaultValue = true)]
    public string FollowerTwitchUserId { get; set; }

    /// <summary>
    ///     Returns true if NewFollowerDto instances are equal
    /// </summary>
    /// <param name="input">Instance of NewFollowerDto to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(NewFollowerDto input) {
        if (input == null) {
            return false;
        }
        return
            (
                NewFollowerId == input.NewFollowerId ||
                NewFollowerId != null &&
                NewFollowerId.Equals(input.NewFollowerId)
            ) &&
            (
                FollowerGoalId == input.FollowerGoalId ||
                FollowerGoalId != null &&
                FollowerGoalId.Equals(input.FollowerGoalId)
            ) &&
            (
                TimeStamp == input.TimeStamp ||
                TimeStamp != null &&
                TimeStamp.Equals(input.TimeStamp)
            ) &&
            (
                FollowerTwitchUserId == input.FollowerTwitchUserId ||
                FollowerTwitchUserId != null &&
                FollowerTwitchUserId.Equals(input.FollowerTwitchUserId)
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext) {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString() {
        var sb = new StringBuilder();
        sb.Append("class NewFollowerDto {\n");
        sb.Append("  NewFollowerId: ").Append(NewFollowerId).Append("\n");
        sb.Append("  FollowerGoalId: ").Append(FollowerGoalId).Append("\n");
        sb.Append("  TimeStamp: ").Append(TimeStamp).Append("\n");
        sb.Append("  FollowerTwitchUserId: ").Append(FollowerTwitchUserId).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson() => JsonConvert.SerializeObject(this, Formatting.Indented);

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input) => Equals(input as NewFollowerDto);

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode() {
        unchecked// Overflow is fine, just wrap
        {
            int hashCode = 41;
            if (NewFollowerId != null) {
                hashCode = hashCode * 59 + NewFollowerId.GetHashCode();
            }
            if (FollowerGoalId != null) {
                hashCode = hashCode * 59 + FollowerGoalId.GetHashCode();
            }
            if (TimeStamp != null) {
                hashCode = hashCode * 59 + TimeStamp.GetHashCode();
            }
            if (FollowerTwitchUserId != null) {
                hashCode = hashCode * 59 + FollowerTwitchUserId.GetHashCode();
            }
            return hashCode;
        }
    }
}
