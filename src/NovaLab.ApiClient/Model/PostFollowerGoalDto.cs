/*
 * NovaLab API
 *
 * An ASP.NET Core Web API for managing your streams
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace NovaLab.ApiClient.Model;

/// <summary>
///     PostFollowerGoalDto
/// </summary>
[DataContract(Name = "PostFollowerGoalDto")]
public class PostFollowerGoalDto : IEquatable<PostFollowerGoalDto>, IValidatableObject {
    /// <summary>
    ///     Initializes a new instance of the <see cref="PostFollowerGoalDto" /> class.
    /// </summary>
    /// <param name="userId">userId.</param>
    /// <param name="dailyGoal">dailyGoal.</param>
    /// <param name="divider">divider.</param>
    /// <param name="customCssStyling">customCssStyling.</param>
    public PostFollowerGoalDto(string userId = default, int dailyGoal = default, string divider = default, string customCssStyling = default) {
        UserId = userId;
        DailyGoal = dailyGoal;
        Divider = divider;
        CustomCssStyling = customCssStyling;
    }

    /// <summary>
    ///     Gets or Sets UserId
    /// </summary>
    [DataMember(Name = "userId", EmitDefaultValue = true)]
    public string UserId { get; set; }

    /// <summary>
    ///     Gets or Sets DailyGoal
    /// </summary>
    [DataMember(Name = "dailyGoal", EmitDefaultValue = false)]
    public int DailyGoal { get; set; }

    /// <summary>
    ///     Gets or Sets Divider
    /// </summary>
    [DataMember(Name = "divider", EmitDefaultValue = true)]
    public string Divider { get; set; }

    /// <summary>
    ///     Gets or Sets CustomCssStyling
    /// </summary>
    [DataMember(Name = "customCssStyling", EmitDefaultValue = true)]
    public string CustomCssStyling { get; set; }

    /// <summary>
    ///     Returns true if PostFollowerGoalDto instances are equal
    /// </summary>
    /// <param name="input">Instance of PostFollowerGoalDto to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(PostFollowerGoalDto input) {
        if (input == null) {
            return false;
        }
        return
            (
                UserId == input.UserId ||
                UserId != null &&
                UserId.Equals(input.UserId)
            ) &&
            (
                DailyGoal == input.DailyGoal ||
                DailyGoal.Equals(input.DailyGoal)
            ) &&
            (
                Divider == input.Divider ||
                Divider != null &&
                Divider.Equals(input.Divider)
            ) &&
            (
                CustomCssStyling == input.CustomCssStyling ||
                CustomCssStyling != null &&
                CustomCssStyling.Equals(input.CustomCssStyling)
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext) {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString() {
        var sb = new StringBuilder();
        sb.Append("class PostFollowerGoalDto {\n");
        sb.Append("  UserId: ").Append(UserId).Append("\n");
        sb.Append("  DailyGoal: ").Append(DailyGoal).Append("\n");
        sb.Append("  Divider: ").Append(Divider).Append("\n");
        sb.Append("  CustomCssStyling: ").Append(CustomCssStyling).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson() => JsonConvert.SerializeObject(this, Formatting.Indented);

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input) => Equals(input as PostFollowerGoalDto);

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode() {
        unchecked// Overflow is fine, just wrap
        {
            int hashCode = 41;
            if (UserId != null) {
                hashCode = hashCode * 59 + UserId.GetHashCode();
            }
            hashCode = hashCode * 59 + DailyGoal.GetHashCode();
            if (Divider != null) {
                hashCode = hashCode * 59 + Divider.GetHashCode();
            }
            if (CustomCssStyling != null) {
                hashCode = hashCode * 59 + CustomCssStyling.GetHashCode();
            }
            return hashCode;
        }
    }
}
