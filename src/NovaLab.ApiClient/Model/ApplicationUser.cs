/*
 * NovaLab API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.ComponentModel.DataAnnotations;

namespace NovaLab.ApiClient.Model
{
    /// <summary>
    /// ApplicationUser
    /// </summary>
    [DataContract(Name = "ApplicationUser")]
    public partial class ApplicationUser : IEquatable<ApplicationUser>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationUser" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="userName">userName.</param>
        /// <param name="normalizedUserName">normalizedUserName.</param>
        /// <param name="email">email.</param>
        /// <param name="normalizedEmail">normalizedEmail.</param>
        /// <param name="emailConfirmed">emailConfirmed.</param>
        /// <param name="passwordHash">passwordHash.</param>
        /// <param name="securityStamp">securityStamp.</param>
        /// <param name="concurrencyStamp">concurrencyStamp.</param>
        /// <param name="phoneNumber">phoneNumber.</param>
        /// <param name="phoneNumberConfirmed">phoneNumberConfirmed.</param>
        /// <param name="twoFactorEnabled">twoFactorEnabled.</param>
        /// <param name="lockoutEnd">lockoutEnd.</param>
        /// <param name="lockoutEnabled">lockoutEnabled.</param>
        /// <param name="accessFailedCount">accessFailedCount.</param>
        /// <param name="twitchBroadcasterId">twitchBroadcasterId.</param>
        /// <param name="twitchAccessToken">twitchAccessToken.</param>
        public ApplicationUser(string id = default(string), string userName = default(string), string normalizedUserName = default(string), string email = default(string), string normalizedEmail = default(string), bool emailConfirmed = default(bool), string passwordHash = default(string), string securityStamp = default(string), string concurrencyStamp = default(string), string phoneNumber = default(string), bool phoneNumberConfirmed = default(bool), bool twoFactorEnabled = default(bool), DateTime? lockoutEnd = default(DateTime?), bool lockoutEnabled = default(bool), int accessFailedCount = default(int), string twitchBroadcasterId = default(string), string twitchAccessToken = default(string))
        {
            this.Id = id;
            this.UserName = userName;
            this.NormalizedUserName = normalizedUserName;
            this.Email = email;
            this.NormalizedEmail = normalizedEmail;
            this.EmailConfirmed = emailConfirmed;
            this.PasswordHash = passwordHash;
            this.SecurityStamp = securityStamp;
            this.ConcurrencyStamp = concurrencyStamp;
            this.PhoneNumber = phoneNumber;
            this.PhoneNumberConfirmed = phoneNumberConfirmed;
            this.TwoFactorEnabled = twoFactorEnabled;
            this.LockoutEnd = lockoutEnd;
            this.LockoutEnabled = lockoutEnabled;
            this.AccessFailedCount = accessFailedCount;
            this.TwitchBroadcasterId = twitchBroadcasterId;
            this.TwitchAccessToken = twitchAccessToken;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name = "userName", EmitDefaultValue = true)]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets NormalizedUserName
        /// </summary>
        [DataMember(Name = "normalizedUserName", EmitDefaultValue = true)]
        public string NormalizedUserName { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets NormalizedEmail
        /// </summary>
        [DataMember(Name = "normalizedEmail", EmitDefaultValue = true)]
        public string NormalizedEmail { get; set; }

        /// <summary>
        /// Gets or Sets EmailConfirmed
        /// </summary>
        [DataMember(Name = "emailConfirmed", EmitDefaultValue = true)]
        public bool EmailConfirmed { get; set; }

        /// <summary>
        /// Gets or Sets PasswordHash
        /// </summary>
        [DataMember(Name = "passwordHash", EmitDefaultValue = true)]
        public string PasswordHash { get; set; }

        /// <summary>
        /// Gets or Sets SecurityStamp
        /// </summary>
        [DataMember(Name = "securityStamp", EmitDefaultValue = true)]
        public string SecurityStamp { get; set; }

        /// <summary>
        /// Gets or Sets ConcurrencyStamp
        /// </summary>
        [DataMember(Name = "concurrencyStamp", EmitDefaultValue = true)]
        public string ConcurrencyStamp { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name = "phoneNumber", EmitDefaultValue = true)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumberConfirmed
        /// </summary>
        [DataMember(Name = "phoneNumberConfirmed", EmitDefaultValue = true)]
        public bool PhoneNumberConfirmed { get; set; }

        /// <summary>
        /// Gets or Sets TwoFactorEnabled
        /// </summary>
        [DataMember(Name = "twoFactorEnabled", EmitDefaultValue = true)]
        public bool TwoFactorEnabled { get; set; }

        /// <summary>
        /// Gets or Sets LockoutEnd
        /// </summary>
        [DataMember(Name = "lockoutEnd", EmitDefaultValue = true)]
        public DateTime? LockoutEnd { get; set; }

        /// <summary>
        /// Gets or Sets LockoutEnabled
        /// </summary>
        [DataMember(Name = "lockoutEnabled", EmitDefaultValue = true)]
        public bool LockoutEnabled { get; set; }

        /// <summary>
        /// Gets or Sets AccessFailedCount
        /// </summary>
        [DataMember(Name = "accessFailedCount", EmitDefaultValue = false)]
        public int AccessFailedCount { get; set; }

        /// <summary>
        /// Gets or Sets TwitchBroadcasterId
        /// </summary>
        [DataMember(Name = "twitchBroadcasterId", EmitDefaultValue = true)]
        public string TwitchBroadcasterId { get; set; }

        /// <summary>
        /// Gets or Sets TwitchAccessToken
        /// </summary>
        [DataMember(Name = "twitchAccessToken", EmitDefaultValue = true)]
        public string TwitchAccessToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApplicationUser {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  NormalizedUserName: ").Append(NormalizedUserName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  NormalizedEmail: ").Append(NormalizedEmail).Append("\n");
            sb.Append("  EmailConfirmed: ").Append(EmailConfirmed).Append("\n");
            sb.Append("  PasswordHash: ").Append(PasswordHash).Append("\n");
            sb.Append("  SecurityStamp: ").Append(SecurityStamp).Append("\n");
            sb.Append("  ConcurrencyStamp: ").Append(ConcurrencyStamp).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  PhoneNumberConfirmed: ").Append(PhoneNumberConfirmed).Append("\n");
            sb.Append("  TwoFactorEnabled: ").Append(TwoFactorEnabled).Append("\n");
            sb.Append("  LockoutEnd: ").Append(LockoutEnd).Append("\n");
            sb.Append("  LockoutEnabled: ").Append(LockoutEnabled).Append("\n");
            sb.Append("  AccessFailedCount: ").Append(AccessFailedCount).Append("\n");
            sb.Append("  TwitchBroadcasterId: ").Append(TwitchBroadcasterId).Append("\n");
            sb.Append("  TwitchAccessToken: ").Append(TwitchAccessToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicationUser);
        }

        /// <summary>
        /// Returns true if ApplicationUser instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationUser input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.NormalizedUserName == input.NormalizedUserName ||
                    (this.NormalizedUserName != null &&
                    this.NormalizedUserName.Equals(input.NormalizedUserName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.NormalizedEmail == input.NormalizedEmail ||
                    (this.NormalizedEmail != null &&
                    this.NormalizedEmail.Equals(input.NormalizedEmail))
                ) && 
                (
                    this.EmailConfirmed == input.EmailConfirmed ||
                    this.EmailConfirmed.Equals(input.EmailConfirmed)
                ) && 
                (
                    this.PasswordHash == input.PasswordHash ||
                    (this.PasswordHash != null &&
                    this.PasswordHash.Equals(input.PasswordHash))
                ) && 
                (
                    this.SecurityStamp == input.SecurityStamp ||
                    (this.SecurityStamp != null &&
                    this.SecurityStamp.Equals(input.SecurityStamp))
                ) && 
                (
                    this.ConcurrencyStamp == input.ConcurrencyStamp ||
                    (this.ConcurrencyStamp != null &&
                    this.ConcurrencyStamp.Equals(input.ConcurrencyStamp))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.PhoneNumberConfirmed == input.PhoneNumberConfirmed ||
                    this.PhoneNumberConfirmed.Equals(input.PhoneNumberConfirmed)
                ) && 
                (
                    this.TwoFactorEnabled == input.TwoFactorEnabled ||
                    this.TwoFactorEnabled.Equals(input.TwoFactorEnabled)
                ) && 
                (
                    this.LockoutEnd == input.LockoutEnd ||
                    (this.LockoutEnd != null &&
                    this.LockoutEnd.Equals(input.LockoutEnd))
                ) && 
                (
                    this.LockoutEnabled == input.LockoutEnabled ||
                    this.LockoutEnabled.Equals(input.LockoutEnabled)
                ) && 
                (
                    this.AccessFailedCount == input.AccessFailedCount ||
                    this.AccessFailedCount.Equals(input.AccessFailedCount)
                ) && 
                (
                    this.TwitchBroadcasterId == input.TwitchBroadcasterId ||
                    (this.TwitchBroadcasterId != null &&
                    this.TwitchBroadcasterId.Equals(input.TwitchBroadcasterId))
                ) && 
                (
                    this.TwitchAccessToken == input.TwitchAccessToken ||
                    (this.TwitchAccessToken != null &&
                    this.TwitchAccessToken.Equals(input.TwitchAccessToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.UserName != null)
                {
                    hashCode = (hashCode * 59) + this.UserName.GetHashCode();
                }
                if (this.NormalizedUserName != null)
                {
                    hashCode = (hashCode * 59) + this.NormalizedUserName.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.NormalizedEmail != null)
                {
                    hashCode = (hashCode * 59) + this.NormalizedEmail.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EmailConfirmed.GetHashCode();
                if (this.PasswordHash != null)
                {
                    hashCode = (hashCode * 59) + this.PasswordHash.GetHashCode();
                }
                if (this.SecurityStamp != null)
                {
                    hashCode = (hashCode * 59) + this.SecurityStamp.GetHashCode();
                }
                if (this.ConcurrencyStamp != null)
                {
                    hashCode = (hashCode * 59) + this.ConcurrencyStamp.GetHashCode();
                }
                if (this.PhoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PhoneNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PhoneNumberConfirmed.GetHashCode();
                hashCode = (hashCode * 59) + this.TwoFactorEnabled.GetHashCode();
                if (this.LockoutEnd != null)
                {
                    hashCode = (hashCode * 59) + this.LockoutEnd.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LockoutEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.AccessFailedCount.GetHashCode();
                if (this.TwitchBroadcasterId != null)
                {
                    hashCode = (hashCode * 59) + this.TwitchBroadcasterId.GetHashCode();
                }
                if (this.TwitchAccessToken != null)
                {
                    hashCode = (hashCode * 59) + this.TwitchAccessToken.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
