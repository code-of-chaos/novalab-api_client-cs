/*
 * NovaLab API
 *
 * An ASP.NET Core Web API for managing your streams
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace NovaLab.ApiClient.Model;

/// <summary>
///     PostNewFollowerDto
/// </summary>
[DataContract(Name = "PostNewFollowerDto")]
public class PostNewFollowerDto : IEquatable<PostNewFollowerDto>, IValidatableObject {
    /// <summary>
    ///     Initializes a new instance of the <see cref="PostNewFollowerDto" /> class.
    /// </summary>
    /// <param name="twitchBoardcasterId">twitchBoardcasterId.</param>
    /// <param name="followerTwitchUserId">followerTwitchUserId.</param>
    public PostNewFollowerDto(string twitchBoardcasterId = default, string followerTwitchUserId = default) {
        TwitchBoardcasterId = twitchBoardcasterId;
        FollowerTwitchUserId = followerTwitchUserId;
    }

    /// <summary>
    ///     Gets or Sets TwitchBoardcasterId
    /// </summary>
    [DataMember(Name = "twitchBoardcasterId", EmitDefaultValue = true)]
    public string TwitchBoardcasterId { get; set; }

    /// <summary>
    ///     Gets or Sets FollowerTwitchUserId
    /// </summary>
    [DataMember(Name = "followerTwitchUserId", EmitDefaultValue = true)]
    public string FollowerTwitchUserId { get; set; }

    /// <summary>
    ///     Returns true if PostNewFollowerDto instances are equal
    /// </summary>
    /// <param name="input">Instance of PostNewFollowerDto to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(PostNewFollowerDto input) {
        if (input == null) {
            return false;
        }
        return
            (
                TwitchBoardcasterId == input.TwitchBoardcasterId ||
                TwitchBoardcasterId != null &&
                TwitchBoardcasterId.Equals(input.TwitchBoardcasterId)
            ) &&
            (
                FollowerTwitchUserId == input.FollowerTwitchUserId ||
                FollowerTwitchUserId != null &&
                FollowerTwitchUserId.Equals(input.FollowerTwitchUserId)
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext) {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString() {
        var sb = new StringBuilder();
        sb.Append("class PostNewFollowerDto {\n");
        sb.Append("  TwitchBoardcasterId: ").Append(TwitchBoardcasterId).Append("\n");
        sb.Append("  FollowerTwitchUserId: ").Append(FollowerTwitchUserId).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson() => JsonConvert.SerializeObject(this, Formatting.Indented);

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input) => Equals(input as PostNewFollowerDto);

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode() {
        unchecked// Overflow is fine, just wrap
        {
            int hashCode = 41;
            if (TwitchBoardcasterId != null) {
                hashCode = hashCode * 59 + TwitchBoardcasterId.GetHashCode();
            }
            if (FollowerTwitchUserId != null) {
                hashCode = hashCode * 59 + FollowerTwitchUserId.GetHashCode();
            }
            return hashCode;
        }
    }
}
